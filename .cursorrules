# Interior Inspiration Website Tech Stack and Project Structure

## Project Type
- Static Website (SSG - Static Site Generation)
- Important Notes:
  - All pages are pre-rendered at build time
  - No server-side operations after deployment
  - Content updates require rebuild and redeploy
  - Build output is in /out directory

## Tech Stack
- Framework: Next.js 13.5.8 (App Router)
- Language: TypeScript
- Styling: Tailwind CSS 3.3.6
- Content Management: 
  - MDX (with @mdx-js)
  - Contentlayer
  - next-mdx-remote
- UI Components:
  - @headlessui/react
  - @heroicons/react
  - react-icons
- Image Processing: Cloudinary
- Development Tools:
  - ESLint
  - PostCSS
  - TypeScript
  - ts-node

## Environment Configuration
- Main environment file: `.env.local` (NOT `.env`)
- Required environment variables:
  - `NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME`: Cloudinary cloud name (dwobltbzw)
  - `CLOUDINARY_API_KEY`: Cloudinary API key
  - `CLOUDINARY_API_SECRET`: Cloudinary API secret
  - `CLOUDINARY_BASE_PATH`: interior-inspiration-website/posts
  - `NEXT_PUBLIC_SITE_URL`: https://akio-hasegawa.design
  - `NEXT_PUBLIC_SITE_NAME`: Interior Design Guide
- Note: scripts/generate-rss.js loads from `.env.local`, not `.env`

## Cloudinary Integration
### URL Structure
- Base URL: `https://res.cloudinary.com/{CLOUD_NAME}/image/upload/`
- Transformations: `f_auto,q_auto,c_auto,g_auto,w_auto,dpr_auto`
- Path: `{seoFileName}` (This is the Cloudinary PublicID)
- Complete URL: `https://res.cloudinary.com/dwobltbzw/image/upload/f_auto,q_auto,c_auto,g_auto,w_auto,dpr_auto/{seoFileName}`

### MDXImage Component Structure
```jsx
<MDXImage 
  localPath={{
    originalFileName: "original-filename.png",
    articleSlug: "article-slug"
  }}
  seo={{
    seoFileName: "seo-friendly-filename-without-extension",
    altText: "Alt text description"
  }}
  pin={{
    title: "Pinterest title",
    description: "Pinterest description"
  }}
/>
```

## Contentlayer Data Structure
### Article JSON Schema
```json
{
  "title": "Article Title",
  "date": "2024-11-28T00:00:00.000Z",
  "categories": ["Category1", "Category2"],
  "coverImage": "seo-filename-without-extension",
  "coverImageAlt": "Cover image alt text",
  "excerpt": "Article excerpt",
  "slug": "article-slug",
  "body": { "raw": "MDX content..." }
}
```

### Important Contentlayer Issues
- Generated files location: `.contentlayer/generated/Article/`
- File naming pattern: `{category}__{slug}.mdx.json`
- Index files: `_index.json` and `_index.mjs` should be filtered out when processing
- Asset validation: Some articles may lack required fields (title, slug, excerpt, date)
- Categories field: May not exist or may not be an array - always validate before use

## RSS Feed Generation
### Key Implementation Details
- Script location: `scripts/generate-rss.js`
- Output: `public/rss.xml`
- Command: `npm run generate-rss`
- Image URL generation: Uses `generateCloudinaryUrl()` function to convert SEO filenames to full URLs
- Pinterest optimization: Includes category hashtags and Chinese tags (#室內設計 #居家裝潢)
- Validation: Filters out invalid articles and `_index.json` files
- Supported formats: RSS 2.0 with media:content extensions for Pinterest

## Typography
- Font Implementation:
  - Using next/font/local for optimal performance
  - Fonts are locally hosted in /public/fonts/
  - Default font settings are configured in app/layout.tsx body tag
  - Font loading strategy: 'swap' for better performance

## Project Structure
/
├── app/                    # Next.js app router pages and components
├── content/               # MDX content files
├── .contentlayer/         # Generated content layer files
├── public/               # Static assets
├── scripts/              # Utility scripts (image processing etc.)
├── types/                # TypeScript type definitions
└── components/           # Reusable React components

## Configuration Files
- next.config.js          # Next.js configuration
- contentlayer.config.ts  # Content layer configuration
- tailwind.config.ts     # Tailwind CSS configuration
- tsconfig.json          # TypeScript configuration
- postcss.config.js      # PostCSS configuration
- eslint.config.mjs      # ESLint configuration

## Build and Development
- Development: `npm run dev`
- Production Build: `npm run build` (Generates static files in /out)
- Preview: `npm run preview` (Serves static files from /out)
- Content Tools: 
  - Image Upload: `npm run upload-images`
  - Image Upload Test: `npm run upload-images:test`
  - Generate Image Sitemap: `npm run generate-image-sitemap`
  - Generate RSS Feed: `npm run generate-rss`

## Common Issues and Solutions
1. **RSS Generation Errors**: 
   - Check `.env.local` exists and contains required Cloudinary variables
   - Verify Contentlayer has generated article data in `.contentlayer/generated/Article/`
   - Ensure articles have required fields (title, slug, excerpt, date)

2. **Image URL Issues**:
   - Article `coverImage` field contains only SEO filename, which is the Cloudinary PublicID
   - Use `generateCloudinaryUrl()` function to convert SEO filename to complete URL
   - URL format: `https://res.cloudinary.com/{CLOUD_NAME}/image/upload/{transformations}/{seoFilename}`
   - Default transformations: f_auto,q_auto,c_auto,g_auto,w_auto,dpr_auto

3. **Contentlayer Processing**:
   - Always filter out files starting with underscore (`_index.json`, `_index.mjs`)
   - Validate article objects before processing
   - Handle missing or invalid categories array gracefully

